{"ast":null,"code":"var _jsxFileName = \"/Users/graemewallace/Desktop/rizz-skibidi-quote-generator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [quote, setQuote] = useState(''); // State to store the random quote\n\n  // Fetch a random quote from the backend\n  const fetchQuote = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/random-quote'); // API call to the backend\n      const data = await response.json();\n      setQuote(data.quote); // Update state with the fetched quote\n    } catch (error) {\n      console.error('Error fetching quote:', error);\n      setQuote('Failed to load a quote. Please try again!');\n    }\n  };\n\n  // Copy the current quote to the clipboard\n  const copyToClipboard = () => {\n    if (quote) {\n      navigator.clipboard.writeText(quote).then(() => {\n        alert('Quote copied to clipboard!');\n      }).catch(err => {\n        console.error('Failed to copy: ', err);\n      });\n    }\n  };\n\n  // Share the current quote on Twitter\n  const shareOnTwitter = () => {\n    if (quote) {\n      const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(quote)}&hashtags=SkibidiRizz,BrainRot`;\n      window.open(twitterUrl, '_blank'); // Open Twitter sharing URL in a new tab\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Rizz Skibidi Brain Rot Quote Generator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quote-box\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: quote || 'Click the button to generate your first quote!'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchQuote,\n        children: \"Generate Quote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: copyToClipboard,\n        disabled: !quote,\n        children: \"Copy Quote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: shareOnTwitter,\n        disabled: !quote,\n        children: \"Share on Twitter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"r0DtsAa0by/2plG0g0U2ZqLPVuQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","quote","setQuote","fetchQuote","response","fetch","data","json","error","console","copyToClipboard","navigator","clipboard","writeText","then","alert","catch","err","shareOnTwitter","twitterUrl","encodeURIComponent","window","open","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/graemewallace/Desktop/rizz-skibidi-quote-generator/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst App = () => {\n  const [quote, setQuote] = useState(''); // State to store the random quote\n\n  // Fetch a random quote from the backend\n  const fetchQuote = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/random-quote'); // API call to the backend\n      const data = await response.json();\n      setQuote(data.quote); // Update state with the fetched quote\n    } catch (error) {\n      console.error('Error fetching quote:', error);\n      setQuote('Failed to load a quote. Please try again!');\n    }\n  };\n\n  // Copy the current quote to the clipboard\n  const copyToClipboard = () => {\n    if (quote) {\n      navigator.clipboard.writeText(quote).then(() => {\n        alert('Quote copied to clipboard!');\n      }).catch((err) => {\n        console.error('Failed to copy: ', err);\n      });\n    }\n  };\n\n  // Share the current quote on Twitter\n  const shareOnTwitter = () => {\n    if (quote) {\n      const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(quote)}&hashtags=SkibidiRizz,BrainRot`;\n      window.open(twitterUrl, '_blank'); // Open Twitter sharing URL in a new tab\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Rizz Skibidi Brain Rot Quote Generator</h1>\n      </header>\n      <main>\n        <div className=\"quote-box\">\n          <p>{quote || 'Click the button to generate your first quote!'}</p>\n        </div>\n        <button onClick={fetchQuote}>Generate Quote</button>\n        <button onClick={copyToClipboard} disabled={!quote}>Copy Quote</button>\n        <button onClick={shareOnTwitter} disabled={!quote}>Share on Twitter</button>\n      </main>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}